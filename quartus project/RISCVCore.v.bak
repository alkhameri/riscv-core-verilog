
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module RISCVCore(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

    // Program Counter
    reg [31:0] PC;
    
    // Instruction signals
    wire [31:0] Instr;
    wire [6:0] opcode;
    wire [4:0] rd, rs1, rs2;
    wire [2:0] funct3;
    wire [6:0] funct7;
    
    // Control signals
    wire RegWrite, ALUSrc, MemRead, MemWrite, MemToReg, Branch, Jump, PCSrc;
    wire [2:0] ImmSel;
    wire [3:0] ALUControl;
    
    // Data paths
    wire [31:0] PCplus4, PCTarget, PCNext;
    wire [31:0] Imm;
    wire [31:0] ReadData1, ReadData2, WriteData;
    wire [31:0] SrcB, ALUResult;
    wire [31:0] ReadData;
    wire zero;
	 wire clk   = MAX10_CLK1_50;    
	 wire rst   = ~KEY[0];


//=======================================================
//  Structural coding
//=======================================================


    // PC update
    always @(posedge clk or posedge rst) begin
        if (rst)
            PC <= 32'b0;
        else
            PC <= PCNext;
    end
    
    // Instruction Memory
    InstrMem instr_mem(
        .clk(clk),
        .PC(PC),
        .Instr(Instr)
    );
    
    // Instruction Decode
    DecodeFields decode(
        .Instr(Instr),
        .opcode(opcode),
        .rd(rd),
        .funct3(funct3),
        .rs1(rs1),
        .rs2(rs2),
        .funct7(funct7)
    );
    
    // Control Unit
    Control control(
        .opcode(opcode),
        .funct3(funct3),
        .funct7(funct7),
        .RegWrite(RegWrite),
        .ALUSrc(ALUSrc),
        .MemRead(MemRead),
        .MemWrite(MemWrite),
        .MemToReg(MemToReg),
        .Branch(Branch),
        .Jump(Jump),
        .PCSrc(PCSrc),
        .ImmSel(ImmSel),
        .ALUControl(ALUControl)
    );
    
    // PC+4 Adder
    PCplus4 pc_plus4(
        .PC(PC),
        .PCplus4(PCplus4)
    );
    
    // Immediate Extender
    Extend extend(
        .Instr(Instr[31:7]),
        .ImmSel(ImmSel),
        .Imm(Imm)
    );
    
    // PC + Immediate Adder
    PCplusimm pc_plus_imm(
        .PC(PC),
        .Imm(Imm),
        .PCTarget(PCTarget)
    );
    
    // PC Mux
    PCmux pc_mux(
        .PCplus4(PCplus4),
        .PCTarget(PCTarget),
        .PCSrc(PCSrc),
        .PCNext(PCNext)
    );
    
    // Register File
    RegisterFile reg_file(
        .clk(clk),
        .rst(rst),
        .RegWrite(RegWrite),
        .Rd(rd),
        .Rs1(rs1),
        .Rs2(rs2),
        .WriteData(WriteData),
        .ReadData1(ReadData1),
        .ReadData2(ReadData2)
    );
    
    // ALU Source Mux
    ALUmux alu_mux(
        .Reg2(ReadData2),
        .Imm(Imm),
        .ALUSrc(ALUSrc),
        .SrcB(SrcB)
    );
    
    // ALU
    ALU alu(
        .SrcA(ReadData1),
        .SrcB(SrcB),
        .ALUControl(ALUControl),
        .ALUResult(ALUResult),
        .zero(zero)
    );
    
    // Data Memory
    DataMem data_mem(
        .clk(clk),
        .MemWrite(MemWrite),
        .ALUResult(ALUResult),
        .WriteData(ReadData2),
        .ReadData(ReadData)
    );
    
    // Write-back Mux
    WBmux wb_mux(
        .ALUResult(ALUResult),
        .ReadData(ReadData),
        .ResultSrc(MemToReg),
        .Result(WriteData)
    );
	 
	 reg [25:0] hb;
	 always @(posedge clk or posedge rst) begin
			if (rst) hb <= 0;
		else     hb <= hb + 1;
	end
	assign HEX5[0] = hb[25];
    

endmodule
